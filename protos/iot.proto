syntax = "proto3";

package iot;


// *****************************************
// Machine message service
// *****************************************
service MachineMessages {
  rpc RegisterMachine (RegisterCmd) returns (RegisterResp) {}
}

// Machine commands
enum MachineCmd {
  M_NONE = 0;
  M_REGISTER = 2;
}

// Machine command response status
enum MachineStatus {
  MS_NONE = 0;
  MS_GOOD = 1;
  MS_NO_SLOT = 2;
  MS_UNEXPECTED_CMD = 98;
  MS_SERVER_EXCEPTION = 99;
}


// Register machine COMMAND message.
message RegisterCmd {
  MachineCmd cmd = 1;
  string machineName = 2;
  string machineIP = 3;
  uint32 machinePort = 4;
}


// Register machine RESPONSE message.
message RegisterResp {
  MachineStatus status = 1;
  string uUID = 2;
}


// *****************************************
// Controller message service
// *****************************************
service ControllerMessages {
  rpc KickWatchdog (WatchdogCmd) returns (WatchdogResp) {}
}

// Controller commands
enum ControllerCmd {
  C_NONE = 0;
  C_WATCHDOG = 1;
}

// Controller command response status
enum ControllerResp {
  CS_NONE = 0;
  CS_GOOD = 1;
  CS_UNEXPECTED_CMD = 98;
  CS_CLIENT_EXCEPTION = 99;
}


// Kick watchdog COMMAND message.
message WatchdogCmd {
  ControllerCmd cmd = 1;
  uint32 tx = 2;
  string uUID = 3;
}


// Kick watchdog RESPONSE message.
message WatchdogResp {
  uint32 tx = 1;
  ControllerResp status = 2;
}
